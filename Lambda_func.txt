# Creating the formatted text for saving into a .txt file
content = """
Lambda functions in Python, also known as anonymous functions, 
allow you to create small, throwaway functions without formally 
defining them using def. They're typically used for short, 
simple operations where defining a full function might feel overkill.

Syntax:
lambda arguments: expression

Arguments: The input(s) to the lambda function (can be multiple, separated by commas).
Expression: A single expression whose result is automatically returned.

Example - Addition using def vs lambda:

def add(x, y):
    return x + y

You can write it as:
add = lambda x, y: x + y
result = add(3, 5)  # Outputs 8

Why and When to Use Lambda:
1. When it's part of a functional operation: Lambda functions shine when 
   combined with functions like map(), filter(), and reduce().

2. One-liners: Ideal for short operations where clarity isn't sacrificed.

Advanced Usage:
- With map(): Apply a function to each element in an iterable.
  nums = [1, 2, 3, 4, 5]
  squares = list(map(lambda x: x ** 2, nums))  # [1, 4, 9, 16, 25]

- With filter(): Filter elements based on a condition.
  even_nums = list(filter(lambda x: x % 2 == 0, nums))  # [2, 4]

- With reduce(): Perform a cumulative operation (from functools).
  from functools import reduce
  product = reduce(lambda x, y: x * y, nums)  # 1 * 2 * 3 * 4 * 5 = 120
"""


square = lambda x: x**2
print(square(5))  # Output: 25


is_even = lambda x: x % 2 == 0
print(is_even(4))  # Output: True
print(is_even(7))  # Output: False


data = [(1, 'apple'), (3, 'banana'), (2, 'orange')]
sorted_data = sorted(data, key=lambda x: x[1])
print(sorted_data)  # Output: [(1, 'apple'), (3, 'banana'), (2, 'orange')]



numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
even_numbers = list(filter(lambda x: x % 2 == 0, numbers))
print(even_numbers)  # Output: [2, 4, 6, 8, 10] 




numbers = [1, 2, 3, 4, 5]
squared_numbers = list(map(lambda x: x**2, numbers))
print(squared_numbers)  # Output: [1, 4, 9, 16, 25]


cube = lambda x: x**3
print(cube(3))  # Output: 27
print(cube(5))  # Output: 125



is_palindrome = lambda s: s == s[::-1]
print(is_palindrome("radar"))  # Output: True
print(is_palindrome("hello"))  # Output: False



data = [(3, 'banana'), (1, 'apple'), (2, 'orange')]
sorted_data = sorted(data, key=lambda x: x[1])
print(sorted_data)  # Output: [(1, 'apple'), (3, 'banana'), (2, 'orange')]



numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
odd_numbers = list(filter(lambda x: x % 2 != 0, numbers))
print(odd_numbers)  # Output: [1, 3, 5, 7, 9]



words = ["apple", "banana", "cherry", "date"]
word_lengths = list(map(lambda x: len(x), words))
print(word_lengths)  # Output: [5, 6, 6, 4]
